#!/usr/bin/python

import argparse
import os
import shutil
import urllib2
import json
import sys
import subprocess

class Bake:
    def __init__(self):
        return
        
    def install(self, package):
        # Is the package already installed?
        if self._isPackageInstalled(package):
            self._writeError("Package '%s' is already installed" % package)
            self._exit(1)
        
        self._writeNotice("Attempting to install %s.." % package)
        
        # Find repository URL
        repository_url = self._getFridgeResponse(package)
        
        # Clone the repository to the kitchen
        subprocess.call(['git', 'clone', repository_url, package], cwd=self._getKitchenPath())
        
        # Set up the soft-link
        src = self._getPackagePath(package) + '/' + package
        dest = self._getBinPath() + '/' + package

        fnull = open(os.devnull, 'w')
        status = subprocess.call(['ln', '-s', src, dest], stderr=fnull)
        fnull.close()
        
        if status != 0:
            self._writeError("There was an error creating the soft-link at %s" % dest)
        
        self._writeSuccess("Package '" + package + "' installed successfully")
        
    def update(self, package):
        self._writeNotice("Attempting to update %s.." % package)
        
        # Check if the package exists
        if not self._isPackageInstalled(package):
            self._writeError("Package '" + package + "' is not installed")
            self._exit(2)
            
        # Pull from the remote
        subprocess.call(['git', 'pull', 'origin', 'master'], cwd=self._getPackagePath(package))
        
        self._writeSuccess("Package '%s' updated successfully" % package)

    def remove(self, package):
        self._writeNotice("Attempting to remove %s.." % package)
        
        # Check if the package exists
        if not self._isPackageInstalled(package):
            self._writeError("Package '%s' is not installed" % package)
            self._exit(2)
            
        try:
            # Remove the soft-link
            os.remove(self._getBinPath() + '/' + package)
        except OSError:
            self._writeError("Unable to delete the soft-link at %s" % self._getBinPath() + '/' + package)
        
        # Remove the actual files
        shutil.rmtree(self._getPackagePath(package))
        
        self._writeSuccess("Package '%s' removed successfully" % package)
        
    def list(self):
        self._writeError("Not implemented")        
        
    def _getFridgeUrl(self):
        return 'https://secure.meanbee.com/fridge'
        
    def _getKitchenPath(self):
        path = '/usr/local/Kitchen'
        
        if not os.path.isdir(path):
            # It doesn't, lets make it
            os.makedirs(path)
        
        return path
        
    def _getBinPath(self):
        return '/usr/local/bin'
        
    def _getPackagePath(self, package):
        return self._getKitchenPath() + '/' + package
        
    def _getFridgeResponse(self, package):
        url = self._getFridgeUrl()

        if package:
           url += '?' + package 
           
        result_raw = urllib2.urlopen(url).read()
        result = json.loads(result_raw)
        
        if result['status'] != "OK":
            self._writeError(result['content'])
            self._exit(4)
        
        return result['content']
        
    def _isPackageInstalled(self, package):
        return os.path.isdir(self._getKitchenPath() + '/' + package)
        
    def _exit(self, code):
        sys.exit(code)
                
    def _writeError(self, message):
        sys.stderr.write('\033[91m' + '[bake] Error: ' + message + '\033[0m' + '\n')
        
    def _writeSuccess(self, message):
        sys.stderr.write('\033[92m' + '[bake] Success: ' + message + '\033[0m' + '\n')
        
    def _writeNotice(self, message):
        sys.stderr.write('\033[33m' + '[bake] ' + message + '\033[0m' + '\n')

parser = argparse.ArgumentParser()

subparsers = parser.add_subparsers(dest='operation')

install_parser = subparsers.add_parser('install', help='Install a script')
install_parser.add_argument('package', action='store', help='The package shortname')

remove_parser = subparsers.add_parser('remove', help='Remove a script')
remove_parser.add_argument('package', action='store', help='The package shortname')

update_parser = subparsers.add_parser('update', help='Update a script')
update_parser.add_argument('package', action='store', help='The package shortname')

args = parser.parse_args()
package = args.package
op = args.operation

bake = Bake()

if op == 'install':
    bake.install(package)
elif op == 'remove':
    bake.remove(package)
elif op == 'update':
    bake.update(package)
else:
    # argparse should prevent anyone getting here.
    sys.stderr.write("Unrecognised operation")
    sys.exit(1)

